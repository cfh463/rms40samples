<EXAMPLES >
           <EXAMPLE title="Transactions - Commit and Rollback">
               <SECTIONS>
               <SECTION>
               <DESC>
                   This is the section that will appear before the code block
               </DESC>
               <CODE>
               <RUBY>
           <![CDATA[
# Let's assume we have a table called users_sample with a two columns, "user_id" and "active"
db = open_db
# Begin transaction
db.startTransaction

# Execute updates
db.executeSql("Delete from users_sample where active = 1")

# Uh oh... maybe we should not really do that after all. Let's rollback the transaction
db.rollbackTransaction

# At this point, our database is in exactly the same state as it was before we started.
# It's as if the "Delete" SQL statement had never existed

# Now let's execute a different statement that we actually want
# Begin another transaction...
db.startTransaction

# Execute updates - we can issue multiple SQL commands within the same transaction

db.executeSql("Update users_sample set active = 0 where user_id = 2")
db.executeSql("Update users_sample set active = 0 where user_id = 3")
db.executeSql("Update users_sample set active = 0 where user_id = 4")
db.executeSql("Update users_sample set active = 0 where user_id = 5")

# This is the point of no return. After commitTransaction is called, all the updates will become permanent
db.commitTransaction

db.close
]]>
				</RUBY>
				<JAVASCRIPT>
		           <![CDATA[
// Let's assume we have a table called users_sample with a two columns, "user_id" and "active"
var db = open_db();

// Begin transaction
db.startTransaction();

// Execute updates
db.executeSql("Delete from users_sample where active = 1");

// Uh oh... maybe we should not really do that after all. Let's rollback the transaction
db.rollbackTransaction();

// At this point, our database is in exactly the same state as it was before we started.
// It's as if the "Delete" SQL statement had never existed

// Now let's execute a different statement that we actually want
// Begin another transaction...
db.startTransaction();

// Execute updates - we can issue multiple SQL commands within the same transaction

db.executeSql("Update users_sample set active = 0 where user_id = 2");
db.executeSql("Update users_sample set active = 0 where user_id = 3");
db.executeSql("Update users_sample set active = 0 where user_id = 4");
db.executeSql("Update users_sample set active = 0 where user_id = 5");

// This is the point of no return. After commitTransaction is called, all the updates will become permanent
db.commitTransaction();
]]>
				</JAVASCRIPT>
								
               </CODE>
               </SECTION>
               </SECTIONS>
           </EXAMPLE>
       </EXAMPLES>
