<div data-role="page">

    
  <div data-role="header" data-position="inline">
    <h1>Database samples</h1>
  </div>

  <div data-role="content">
  <h2>Ruby</h2>
    <ul data-role="listview">
      <li><a href="<%= url_for :action => :initdb %>">Init DB</a></li>    
      <li><a href="#">Import</a></li>
      <li><a href="#">Export</a></li>
      <li><a href="#">Seed</a></li>
      <li><a href="<%= url_for :action => :transactions %>">Transactions</a></li>
    </ul>

  <h2>Javascript</h2>
  <ul data-role="listview">
    <li><a href="#">Import</a></li>
    <li><a href="#">Export</a></li>
    <li><a href="#">Seed</a></li>
    <li><a href="#" onclick="transactions()">Transactions</a></li>
  </ul>  
  </div>
  
  <script type="text/javascript">
    function transactions() {
      // Let's assume we have a table called Users with a two columns, "user_id" and "active"
        
      // Begin transaction
      Rho.Database.startTransaction();
      
      // Execute updates
      Rho.Database.executeSQL("Delete from Users where active = 1")
      
      // Uh oh... maybe we should not really delete those users after all. Let's rollback the transaction
      Rho.Database.rollbackTransaction();
  
      // At this point, our database is in exactly the same state as it was before we started.
      // It's as if the "Delete" SQL statement had never existed
      
      // Now let's execute a different statement that we actually want:
      
      // Begin another transaction...
      Rho.Database.startTransaction();
      
      // Execute updates - we can issue multiple SQL commands within the same transaction
      
      Rho.Database.executeSQL("Update Users set active = 0 where user_id = 2");
      Rho.Database.executeSQL("Update Users set active = 0 where user_id = 3");
      Rho.Database.executeSQL("Update Users set active = 0 where user_id = 4");
      Rho.Database.executeSQL("Update Users set active = 0 where user_id = 5");
      
      // This is the point of no return. After commit() is called, all the updates will become permanent
      Rho.Database.commit();      
    }
  </script>
</div>
